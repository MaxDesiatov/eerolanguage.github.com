//---------------------------------------------------------------------------------------------
// To compile and run this example from the command line:
//
// $ <path_to_eero_clang>/clang -fobjc-gc -framework Foundation files.eero -o files
//
// $ touch readme.txt
// $ ./files
//
// You should see something like:
//
// $ 2012-07-10 19:44:41.862 files[11965:903] File descriptor is 3
// $ 2012-07-10 19:44:41.865 files[11965:903] Full path example: /tmp/examples/files
//
// Note that this example uses garbage collection (-fobjc-gc compiler switch). 
// Eero does assume any particular memory-management scheme, so traditional objc
// reference counting could also be used (by adding appropriate 
// autorelease/retain/release statements). ARC is supported as well, but currently 
// requires an Apple-specific library.
//
//---------------------------------------------------------------------------------------------

#import <Foundation/Foundation.h>


interface FileHelper : Object  // "Object" is the same as "NSObject"

  property (readonly)
    String volumeName    // both are readonly properties
    String volumeFormat  //

  + pathStringWithComponents: Array, return String  // class method

  openFile: String, [withPermissions: String], return FileHandle  // instance method

end

implementation FileHelper  // no '@' needed for objc keywords

  private  // no "{}" needed for instance variables
    int iBytesUsed
    int iBytesFree

  // "components" is the default arg variable name for "pathStringWithComponents"
  + pathStringWithComponents: Array, return String
    fullPathName := ''  // empty objc string literal implies mutable
    for String component in components
      fullPathName << '/' + component  // string concatenation with '+' and '<<'
    return fullPathName

  // "withPermissions" was declared optional, so default value is defined here
  openFile: String path, withPermissions: String = 'readonly', return FileHandle
    FileHandle handle = nil
    if permissions == 'readonly' or permissions == 'r'
      handle = FileHandle fileHandleForReadingAtPath: path
    else if permissions == 'readwrite' or permissions == 'rw'
      handle = FileHandle fileHandleForUpdatingAtPath: path
    return handle

end


int main() 
 
  helper := FileHelper new  // declare variable "helper" via type inference

  files := []  // empty array literal implies mutable
  files addObject: (helper openFile: 'readme.txt')  // can group message in parens

  for FileHandle handle in files  // all objects are pointers, so no '*' needed
    Log( 'File descriptor is %@', (Number)(handle fileDescriptor) )
    handle closeFile

  fullpath := FileHelper pathStringWithComponents: ['tmp', 'examples', 'files']
  Log('Full path example: %@', fullpath)

  return 0  // semicolons are optional almost everywhere



